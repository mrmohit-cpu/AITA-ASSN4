import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load the dataset from your local path
file_path = r"C:\Users\MOHIT\Desktop\creditcard1.csv"  # Modify the path as needed
data = pd.read_csv(file_path)

# Print column names to verify
print("Column Names:\n", data.columns)

# Check if 'label_column_name' exists and drop it if it does
label_column = 'label_column_name'  # Replace with the actual column name if you have one
if label_column in data.columns:
    features = data.drop([label_column], axis=1)
else:
    features = data  # Use full dataset if there's no label column

# Normalize the features using StandardScaler
scaler = StandardScaler()
normalized_data = scaler.fit_transform(features)

# Elbow Method to determine the optimal number of clusters
inertia = []
k_range = range(1, 11)  # Test k from 1 to 10

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(normalized_data)
    inertia.append(kmeans.inertia_)

# Plot the elbow graph
plt.figure(figsize=(8, 6))
plt.plot(k_range, inertia, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal Number of Clusters')
plt.xticks(k_range)
plt.grid(True)
plt.show()

# Determine the optimal number of clusters
# You might need to inspect the elbow plot manually and choose the optimal number
optimal_k = 4  # Replace with the number of clusters chosen from the elbow plot

# Apply K-means clustering with the optimal number of clusters
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(normalized_data)

# Predict the clusters
clusters = kmeans.predict(normalized_data)

# Add the cluster results to the original data
data['Cluster'] = clusters

# Optional: Visualize the clusters (only if the dataset has 2 dimensions or after dimensionality reduction)
if normalized_data.shape[1] >= 2:  # Check if there are at least 2 dimensions
    plt.scatter(normalized_data[:, 0], normalized_data[:, 1], c=clusters, cmap='viridis')
    plt.title('K-means Clustering Results')
    plt.xlabel('Feature 1 (scaled)')
    plt.ylabel('Feature 2 (scaled)')
    plt.show()

# Print the cluster centers
print("Cluster Centers: \n", kmeans.cluster_centers_)

# Save the dataset with the cluster labels for further analysis
data.to_csv(r'C:\Users\MOHIT\Desktop\creditcard_with_clusters.csv', index=False)  # Modify the save path as needed
